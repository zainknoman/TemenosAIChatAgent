# Dockerfile.frontend
# Use an official Node.js runtime as a parent image
FROM node:18-alpine as build-stage

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json (if any)
# to install dependencies
COPY package*.json ./

# Install application dependencies
# The --force is sometimes needed with create-react-app dependencies
RUN npm install --force

# Copy the rest of the application code
COPY . .

# Build the React app for production
# This creates the 'build' folder with static assets
RUN npm run build

# --- DEBUGGING STEP 1: List contents of React build directory ---
RUN echo "Contents of /app/build after npm run build:"
RUN ls -la /app/build
# -----------------------------------------------------------------

# Use a lightweight web server (Nginx) to serve the static files
FROM nginx:alpine

# Copy the custom Nginx configuration
# This will replace the default Nginx config
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built React app from the previous stage
COPY --from=build-stage /app/build /usr/share/nginx/html

# --- DEBUGGING STEP 2: List contents of Nginx serving directory ---
RUN echo "Contents of /usr/share/nginx/html after copy:"
RUN ls -la /usr/share/nginx/html
# ------------------------------------------------------------------

# Expose port 80 for the web server
EXPOSE 80

# Command to start Nginx
CMD ["nginx", "-g", "daemon off;"]
